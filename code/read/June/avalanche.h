
//https://docviewer.yandex.ru/view/0/?page=2&*=%2B3Eucsn3t1Ld%2B%2B%2FsrQ%2FJFdCaYgN7InVybCI6Imh0dHA6Ly93d3cubWV0ZW9yZi5ydS91cGxvYWQvaWJsb2NrLzQ0NC8lRDAlQTAlRDAlOTQlMjA1Mi4zNy42MTJfMjAwMC5wZGYiLCJ0aXRsZSI6ItCg0JQgNTIuMzcuNjEyXzIwMDAucGRmIiwibm9pZnJhbWUiOnRydWUsInVpZCI6IjAiLCJ0cyI6MTU2MDgwMDA0MjM3NiwieXUiOiI2NTE2NzcwNTIxNTYwODAwMDM3Iiwic2VycFBhcmFtcyI6Imxhbmc9cnUmdG09MTU2MDgwMDAzNyZ0bGQ9cnUmbmFtZT0lRDAlQTAlRDAlOTQrNTIuMzcuNjEyXzIwMDAucGRmJnRleHQ9JUQwJUJGJUQxJTgwJUQwJUJFJUQwJUIzJUQwJUJEJUQwJUJFJUQwJUI3JUQwJUI4JUQxJTgwJUQwJUJFJUQwJUIyJUQwJUIwJUQwJUJEJUQwJUI4JUQwJUI1KyVEMCVCQiVEMCVCMCVEMCVCMiVEMCVCOCVEMCVCRCVEMCVCRCVEMCVCRSVEMCVCOSslRDAlQkUlRDAlQkYlRDAlQjAlRDElODElRDAlQkQlRDAlQkUlRDElODElRDElODIlRDAlQjgmdXJsPWh0dHAlM0EvL3d3dy5tZXRlb3JmLnJ1L3VwbG9hZC9pYmxvY2svNDQ0LyUyNUQwJTI1QTAlMjVEMCUyNTk0JTI1MjA1Mi4zNy42MTJfMjAwMC5wZGYmbHI9MiZtaW1lPXBkZiZsMTBuPXJ1JnNpZ249NzA0OTE3MGFmNmZmMThhZGQxNzMyM2M0OGMzN2JjMmUma2V5bm89MCJ9&lang=ru //


#include <math.h>
#define pi 3.141592653589793238462643383279

using namespace std;

class aval
{
public:
	double a; //угол наклона в градуса
	double h; //толщина снега, м
	double L; //длина зоны зарождения лавин по гипотенузе,м
	double q; //сумма осадков за последние 24 часа до составления прогноза, мм
	double o; //средняя интенсивность осадков за последние 3ч, мм/ч
	double v; //скорость ветра, (используется скорость максимального порыва ветра за последние 24 ч до составления прогноза), м/с
	double t; //средняя температура воздуха за период наличия снега на склоне, °С
	double te; //время нахождения снега на склоне, ч
	double h0; //толщина снега на склоне в начале наблюдений, м
	double h10; //средняя толщина снега за последние 10 сут, м;
	double t10; //средняя температура воздуха за последние 10 сут, °С
	double dh; //изменение толщины снега за последние сутки, м
	double tc;//средняя температура воздуха за последние сутки, °C

	double hu;//влажность, чисто по фану

	double vero;// Вероятность исключительной лавинной опасности //????ВАЖНО ПРОВЕРИТЬ ПРИСУТВИЕ СНЕГА В ПРИНЦЕПЕ - т.е использовать в совокупности с другими вероятностями, иначе прогноз будет не точен????//
	double vero2;// Вероятность массового схода лавин значительного объема
	double vero3;// Вероятность того, что снег в неустойчивом состоянии
	double paa;// Используем в дальнейшем для прогноза объемов лавин

	aval(double alpha, double vn, double temp, double hum)//конструктор, но не путать с лего
	{
		//узнаем с ПИКОспутника (xD)//
		a = 25;///gkjk
		v = vn;
		t = temp;
		t10 = -1;
		hu = hum;

		//задаем при старте, но никому не говорим об этом дейсве//
		h = 0.51;//толщина снега на склоне, м
		L = 100;//длина зоза зарождения по гипотенузе, м
		q = 16;//сумма осадков за последние 24 часа до составления прогноза, мм
		o = 1;//средняя интенсивность осадков за последние 24 часа, мм/ч
		te = 300;//время нахождения снега на склоне, ч
		h0 = 0.31;//толщина снега на склоне в начале наблюдений, м
		h10 = 0.4;//средняя толщина снега за последние 10 суток, м
		dh = -0.2;//изменение толщины снега за последние сутки, м 
		tc = -2;//средняя температура воздуха за последние сутки, °C
	}
	void avalrefresh(double alpha, double vn, double temp, double hum)//обновления значений, на самом деле не пригодится, скорее всего)
	{
		//узнаем с ПИКОспутника (xD)//
		a = alpha;///gkjhv
		v = vn;
		t = temp;
		t10 = -1;
		hu = hum;

		//задаем при старте, но никому не говорим об этом дейсве//
		h = 0.51;//толщина снега на склоне, м
		L = 100;//длина зоза зарождения по гипотенузе, м
		q = 16;//сумма осадков за последние 24 часа до составления прогноза, мм
		o = 1;//средняя интенсивность осадков за последние 24 часа, мм/ч
		te = 300;//время нахождения снега на склоне, ч
		h0 = 0.31;//толщина снега на склоне в начале наблюдений, м
		h10 = 0.4;//средняя толщина снега за последние 10 суток, м
		dh = -0.2;//изменение толщины снега за последние сутки, м
		tc = -2;//средняя температура воздуха за последние сутки, °C
	}
		double pai()//(1)
		{
			//cout << pow(0.8*pow(e, (-1 * abs(a - 35)) / 7.2), (3.1*(1 + pow(e, (9 * (a - 90))) + pow(e, (9 * (14 - a))))))<<endl;
			return pow(     0.8*pow(e, (-1*abs(a-35))/7.2  )    ,  (  3.1*(1 + pow(e, (9*(a-90)))+pow(e, (9*(14-a))))  )   );
			//return pow(0.8* (pow(e, (-abs(a - 35.0) / 7.2))), 3.1*(1 + pow(e, (9 * (a - 90))) + pow(e, (9 * (14.0 - a)))));
			//return  pow(0.19, 3.1);
		}
	
		double pli()//(2)
		{
			if(a<=58)
			{
				//cout << pow((1.65 / pi)*atan(L / 16.0), 2.9*(1 + pow(e, (2.2*(7.1 - L))))) << endl;
				return pow(  (1.65/pi)*atan(L/16.0), 2.9*(1 + pow(e, (2.2*(7.1-L))))  );
			}
			else
			{
				return pow(  (1.54/pi)*atan(L/2.6), 3.1*(1 + pow(e, (142*(0.12-L))))  );
			}
		}
	
		double phi()//(3)
		{
			//cout << pow((1.71 / pi)*atan(2.7*pow(h, 1.3)), 2.6*(1 + pow(e, (3.6*(51 - 100 * h))))) << endl;
			//cout << 2.6*(1 + pow(e, (3.6*(51 - 100 * h)))) << endl;	
			return pow( (1.71/pi)*atan(2.7*pow(h, 1.3)), 2.6*(1 + pow(e, (3.6*(51-100*h)))) );
		}

		double plil()//(4)
		{
			//cout << pow(pli(), (1 - 0.13*pai() - 0.08*phi())) << endl;
			return pow(  pli(), (1 - 0.13*pai()-0.08*phi() )  );
		}
	
	
		double pail()//(5)
		{
			//cout << pow(pai(), (1.0 - (0.43 * pli()) - (0.47 * phi()))) << endl;
			return pow( pai(), (1.0 - ( 0.43 * pli() ) - ( 0.47 * phi() ) ) );	
		}
		
		double phil()//(6)
		{
			//cout << pow(phi(), (1.0 - (0.49 * pai()) - (0.44 *  pli()))) << endl;
			return pow( phi(), ( 1.0 - ( 0.49 * pai() ) - ( 0.44 *  pli() ) ) );
		}
		
		double p_i()//(7)
		{
			//cout << pail() * plil() * phil() << endl;
			return pail() * plil() * phil();
		}
		
		double pqi()//(8)
		{
			//cout << pow(((2.0 / pi) * atan(0.52 * q)), (1.0 - (0.17 * p_i()))) << endl;
			return pow(	( ( 2.0 / pi ) * atan( 0.52 * q) ), ( 1.0 - ( 0.17 * p_i() ) ) );
		}
	
		
		double dqi()//(9)
		{
			if(q<=46.0)
			{
				//cout << (0.161*q) << endl;
				return (0.161*q);
			}
			else
			{
				//cout << (2.8*q - 121.4) << endl;
				return (2.8*q-121.4);
			}
		}
		
		double pvi()//(10)
		{
			//cout << (pow((1.97 / pi)*atan(pow(o, 0.63)), (1 - 0.15*p_i()))) << endl;
			return ( pow( (1.97/pi)*atan(pow(o, 0.63)), (1-0.15*p_i()) ) );
		}
	
		double dt10i()//(11)
		{
			if(t10<=-0.3)
			{
				//cout << (0.12*grt10()) << endl;
				return (0.12*grt10());
			}
			else
			{
				//cout << (2.2*(1.8 + grt10())) << endl;
				return (2.2*(1.8 + grt10()));
			}
		}
		double grt10()//(12)
		{
			if (t10 > 0)
			{
				//cout << (t10 / h) << endl;
				return (t10 / h);
			}
			else
			{
				//cout << (-t10 / h10) << endl;
				return (-t10 / h10);
			}
		}
	
		double pti()//(13)
		{
			if(t<=-0.3)
			{
				//cout << ((2 / pi)*atan(grt() - 13.2)) << endl;
				return ((2/pi)*atan(grt()-13.2));
			}
			else
			{
				//cout << ((2.0 / pi)*atan(grt() + 11.2)) << endl;
				return ((2.0/pi)*atan(grt()+11.2));
			}
		}
	
		double poi()//(14)
		{
			//cout << pow((1.97 / pi) * atan(pow(o, 0.63)), (1.0 - (0.15 * p_i()))) << endl;
			return pow( ( 1.97 / pi ) * atan( pow( o, 0.63 ) ), ( 1.0 - ( 0.15 * p_i() ) ) );
		}
		
		double pt10i()//(15)
		{
			if(t10 <= -0.3)
			{
				//cout << pow((2.0 / pi) * atan(1.5 * grt10()), (1.0 - (0.05 * p_i()))) << endl;
				return pow( ( 2.0 / pi) * atan( 1.5 * grt10() ), ( 1.0 - ( 0.05 * p_i() ) ) );
			}
			else
			{
				//cout << ((2.0 / pi) * atan(11.7 * (grt10() + 2.3))) << endl;
				return ( ( 2.0 / pi) * atan( 11.7 * ( grt10() + 2.3 ) ) );
			}
		}
		
		double grt()//(16)
		{
			if (t > 0)
			{
				//cout << (2 * t) / (h + h0) << endl;
				return (2 * t) / (h + h0);
			}
			else
			{
				//cout << (2 * (-t)) / (h + h0) << endl;
				return (2 * (-t)) / (h + h0);
			}
		}
		
		double dti()//(17)
		{
			if(t <= -0.3)
			{
				//cout << ((2.0 / pi) * atan(0.06 * te)) << endl;
				return ( ( 2.0 / pi ) * atan( 0.06 * te ) );
			}
			else
			{
				//cout << ((2.0 / pi) * atan(te)) << endl;
				return ( ( 2.0 / pi ) * atan( te ) );
			}
		}

		//%%%%%%%%%%%%%%%%%%%%// критическая вероятность
				void queen()
				{
					vero = pow(p_i(), (1 - (2 / pi)*atan(0.4*poi() + dqi()*pqi() + pvi() + dti()*pti() + dt10i()*pt10i())));
					if (vero == 1)
					{
						vero = 0;
					}
				}
		//%%%%%%%%%%%%%%%%%%%%// критическая вероятность


		double pad()//(19)
		{
			return pai();
		}
		double pld()//(20)
		{
			return pli();
		}

		double phd()//(21)
		{
			return pow((1.71 / pi) * atan(2.7 * pow(h, 1.3)), (2.6 * (1 + pow(e, (3.2 * (38 - 100 * h))))));
		}

		double padl()//(22)
		{
			return pow(pad(), (1 - 0.43 * pld() - 0.47 * phd()));
		}

		double phdl()//(23)
		{
			return pow(phd(), (1 - 0.49 * pad() - 0.44 * pld()));
		}

		double pldl()//(24)
		{
			return pow(pld(), (1 - 0.13 * pad() - 0.08 * phd()));
		}

		double pd()//(25)
		{
			return padl() * pldl() * phdl();
		}

		double pqd()//(26)
		{
			return pow(((2 / pi) * atan(0.8  * q)), (1 - 0.09 * pd()));
		}

		double dqd()//(27)
		{
			if (q <= 10)
				return 0.071 * q;
			else
				return 1.65 * q - 15.79;
		}

		double pod()//(28)
		{
			return pow(((1.97 / pi) * atan(pow(o, 1.3))), (1 - 0.05 * pd()));
		}

		double pvd()//(29)
		{
			return pow(((1.4 / pi) * atan(v)), (1 - 0.17 * pd()));
		}

		double dt10d()//(30)
		{
			if (t10 <= -0.3 && grt10() <= 13.0)
			{
				return 0.62*grt10();
			}
			if (t10 <= -0.3 && grt10() > 13.0)
			{
				return 1.26*grt10();
			}
			if (t10 > -0.3)
			{
				return 2.2*(1.8 + grt10());
			}
			else 
				return 0;
		}

		double pt10d()//(31)
		{
			if (t10 <= -0.3 && grt10() <= 13.0)
			{
				return (pow((2 / pi)*atan(2.2*grt10()), 1 - 0.17*pd()));
			}
			if (t10 <= -0.3 && grt10() > 13.0)
			{
				return (pow((2 / pi)*atan(2.9*grt10()), 1 - 0.22*pd()));
			}
			if (t10 > -0.3)
			{
				return ((2.0 / pi)*atan(11.7*grt10() + 2.3));
			}
			else 
				return 0;
		}


		double ptd()//(32)
		{
			if (t<=-0.3)
			{
				return ((2 / pi)*atan(grt() - 9.2));
			}
			else
			{
				return ((2 / pi)*atan(grt() + 13.8));
			}
		}

		double ph0d()//(33)
		{
			return pow( (1.95/pi)*atan(pow(h0, 3.4)) , (1-0.07*pd()));
		}
		double dtd()//(34)
		{
			if (t<=-0.3)
			{
				return ((2 / pi)*atan(0.17*te));
			}
			else
			{
				return ((2/pi)*atan(2.44*te));
			}
		}

		//%%%%%%%%%%%%%%%%%%%%%%%// высокая вероятность
				void queen2()
				{
					vero2 = pow(pd(), (1-(1.99/pi)*atan(0.4*pod()+dqd()*pqd()+pvd()+dtd()*ptd()+dt10d()*pt10d()+0.7*ph0d())));//(35)
				}
		//%%%%%%%%%%%%%%%%%%%%%%%// высокая вероятность

		double pa()//(36)
		{
			return pai();
		}

		double pl()//(37)
		{
			return pli();
		}

		double ph()//(38)
		{
			return pow(((1.71 / pi) * atan(4.8  * pow(h, 1.8))), (2.3 * (1 + pow(e, 3.2 * (22 - 100 * h)))));
		}

		double pal()//(39)
		{
			return pow(pa(), (1 - 0.43 * pl() - 0.47 * ph()));
		}

		double phl()//(40)
		{
			return pow(ph(), (1 - 0.49 * pa() - 0.44 * pl()));
		}

		double pll()//(41)
		{
			return pow(pl(), (1 - 0.13 * pa() - 0.08 * ph()));
		}

		double p()//(42)
		{
			return pal() * pll() * phl();
		}
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
/*@@@@@@@*/double pq()//(43)																											//@@@@@@@
/*@@@@@@@*/{																															//@@@@@@@
/*@@@@@@@*/		if (q <= 11)																											//@@@@@@@
/*@@@@@@@*/			return (2 / pi) * atan(0.12 * q);																					//@@@@@@@
/*@@@@@@@*/		else																													//@@@@@@@
/*@@@@@@@*/			return (pow(((1.98 / pi) * atan(q - 10.968)), (1 - 0.08 * p())));												//@@@@@@@
/*@@@@@@@*/}																														//@@@@@@@
/*@@@@@@@*/																															//@@@@@@@
/*@@@@@@@*/double dq()//(44)																										//@@@@@@@
/*@@@@@@@*/{																														//@@@@@@@
/*@@@@@@@*/		if (q <= 11)																								//@@@@@@@
/*@@@@@@@*/			return (2 / pi) * atan(q / 14);																			//@@@@@@@
/*@@@@@@@*/		else																										//@@@@@@@
/*@@@@@@@*/			return 14.6;																							//@@@@@@@
/*@@@@@@@*/}																												//@@@@@@@
/*@@@@@@@*/																													//@@@@@@@
/*@@@@@@@*/double po()//(45)																							//@@@@@@@
/*@@@@@@@*/{																											//@@@@@@@
/*@@@@@@@*/		return (pow(((1.97 / pi) * atan(pow(o, 1.3))), (1 - 0.05 * p())));										//@@@@@@@
/*@@@@@@@*/}																											//@@@@@@@
/*@@@@@@@*/																											//@@@@@@@
/*@@@@@@@*/double pvv()//(46)																						//@@@@@@@
/*@@@@@@@*/{																										//@@@@@@@
/*@@@@@@@*/		return ((0.96 + 18.36 * (2 / pi) * atan(1100 * dh)) * atan(pow((v / 3.2), 1.7)));					//@@@@@@@
/*@@@@@@@*/}																										//@@@@@@@
/*@@@@@@@*/																											//@@@@@@@
/*@@@@@@@*/double pv()//(47)																					//@@@@@@@
/*@@@@@@@*/{																									//@@@@@@@
/*@@@@@@@*/		return pow(0.95, (1 + pow(e, 12 * (5.6 - v)))) * pvv();											//@@@@@@@
/*@@@@@@@*/}																									//@@@@@@@
/*@@@@@@@*/																										//@@@@@@@
/*@@@@@@@*/double ph0()//(48)																				//@@@@@@@
/*@@@@@@@*/{																								//@@@@@@@
/*@@@@@@@*/		return pow(((1.95 / pi) * atan(pow(h0, 3.4))), (1 - 0.07 * p()));							//@@@@@@@
/*@@@@@@@*/}																								//@@@@@@@
/*@@@@@@@*/																								//@@@@@@@
/*@@@@@@@*/double pt10()//(49)																			//@@@@@@@
/*@@@@@@@*/{																							//@@@@@@@
/*@@@@@@@*/		if (t10 < -0.3)																		//@@@@@@@
/*@@@@@@@*/		{						   															//@@@@@@@
/*@@@@@@@*/			if (grt10() > 16.3)															  //@@@@@@@
/*@@@@@@@*/				return (pow(((1.98 / pi) * atan(4.2 * (grt10() - 16.3))), (1 - 0.11 * p())));//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
/*@@@@@@@*/			else																	     //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@	
/*@@@@@@@*/			{																													//@@@@@@@
/*@@@@@@@*/				return (0.074 * (1.98 / pi) * atan(1.4 * (grt10() - 16.3)));													//@@@@@@@
/*@@@@@@@*/			}																													//@@@@@@@
/*@@@@@@@*/		}																														//@@@@@@@
/*@@@@@@@*/		else																													//@@@@@@@
/*@@@@@@@*/			return (pow(((2 / pi) * atan(4.8 * (grt10() + 13))), (1 - 0.08 * p())));											//@@@@@@@
/*@@@@@@@*/}																															//@@@@@@@
/*@@@@@@@*/																																//@@@@@@@
/*@@@@@@@*/double dt()//(50)																											//@@@@@@@
/*@@@@@@@*/{																															//@@@@@@@
/*@@@@@@@*/		if (t10<-0.3 && grt10()>16.3)																							//@@@@@@@
/*@@@@@@@*/		{																														//@@@@@@@
/*@@@@@@@*/			return pow(((1.98 / pi)*atan((4.2*(grt10() - 16.3)))), (1 - 0.11*p()));												//@@@@@@@
/*@@@@@@@*/		}																														//@@@@@@@
/*@@@@@@@*/		if (t10<-0.3 && grt10() <= 16.3)																						//@@@@@@@
/*@@@@@@@*/		{																														//@@@@@@@
/*@@@@@@@*/			return (0.074*(1.98 / pi)*atan(1.4*(grt10() - 16.3)));																//@@@@@@@
/*@@@@@@@*/		}																														//@@@@@@@
/*@@@@@@@*/		if (t10 >= -0.3)																										//@@@@@@@
/*@@@@@@@*/		{																														//@@@@@@@
/*@@@@@@@*/			return (pow(((2 / pi)*atan(4.8*(grt10() + 13))), (1 - 0.08*p())));													//@@@@@@@
/*@@@@@@@*/		}	else {return 0;}																									//@@@@@@@
/*@@@@@@@*/}																															//@@@@@@@
/*@@@@@@@*/double pt()//(51)																											//@@@@@@@
/*@@@@@@@*/{																															//@@@@@@@
/*@@@@@@@*/		if (grt10()>9.6 && t<-0.3)																								//@@@@@@@
/*@@@@@@@*/		{																														//@@@@@@@
/*@@@@@@@*/			return (pow(((2 / pi)*atan(4.6*(grt() - 8.6))), (1 - 0.05*p())));													//@@@@@@@
/*@@@@@@@*/		}																														//@@@@@@@
/*@@@@@@@*/		if (grt10() <= 9.6 && t<-0.3)																							//@@@@@@@
/*@@@@@@@*/		{																														//@@@@@@@
/*@@@@@@@*/			return ((0.17 / pi)*atan(1.1*(grt() - 9.6)));																		//@@@@@@@
/*@@@@@@@*/		}																														//@@@@@@@
/*@@@@@@@*/		if (t >= -0.3)																											//@@@@@@@
/*@@@@@@@*/		{																														//@@@@@@@
/*@@@@@@@*/			return ((2 / pi)*atan(3.8*(grt() + 6)));																			//@@@@@@@
/*@@@@@@@*/		}	else {return 0;}																									//@@@@@@@
/*@@@@@@@*/}																															//@@@@@@@
/*@@@@@@@*/		//@@@@@@@																												//@@@@@@@
/*@@@@@@@*///@@@@@@@@@@@@@@@@@@@@// принциальная вероятность - устойчивость склона														//@@@@@@@
/*@@@@@@@*/		void queen3()																											//@@@@@@@
/*@@@@@@@*/		{																														//@@@@@@@
/*@@@@@@@*/			vero3 = pow(p(), (1 - (1.99 / pi)*atan(0.7*ph0d() + 0.4*po() + dq()*pq() + pv() + dt()*pt() + 12.3*pt10())));		//@@@@@@@
/*@@@@@@@*/			paa = pow(vero, (1 - vero) / (1.1));																				//@@@@@@@
/*@@@@@@@*/			//vero3 = atan(0.7*ph0d() + 0.4*po() + dq()*pq() + pv() + dt()*pt() + 12.3*pt10());									//@@@@@@@
/*@@@@@@@*/		}																														//@@@@@@@
/*@@@@@@@*///@@@@@@@@@@@@@@@@@@@@// принциальная вероятность																			//@@@@@@@
/*@@@@@@@*/																																//@@@@@@@
};/*@@@@@*/																																//@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@